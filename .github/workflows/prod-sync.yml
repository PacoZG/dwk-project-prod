name: Deploy Tagged Release to Production via ArgoCD

on:
  push:
    tags:
      # Trigger on semantic versioning tags like 1.0, 2.1
      # This pattern aligns with the validation step below.
      - '[0-9]+.[0-9]+'

jobs:
  update-argocd-target:
    runs-on: ubuntu-latest
    permissions:
      contents: write # Grant write permission to push changes back to the repository

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # Fetch full history to allow pushing to a branch after a tag trigger
          fetch-depth: 0
          # Use the default GITHUB_TOKEN which has 'contents: write' permission
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Tag Name
        id: get_tag
        run: |
          # Extract the tag name (e.g., '1.0' from 'refs/tags/1.0')
          TAG_NAME="${GITHUB_REF#refs/tags/}"
          echo "Detected tag: $TAG_NAME"
          echo "TAG_NAME=$TAG_NAME" >> "$GITHUB_OUTPUT" # Set as output for subsequent steps

      - name: Validate Tag Format
        run: |
          # Ensure the tag matches the expected semantic versioning format (X.Y.)
          if ! [[ "${{ steps.get_tag.outputs.TAG_NAME }}" =~ ^[0-9]+\.[0-9]+$ ]]; then
            echo "::error::Tag name '${{ steps.get_tag.outputs.TAG_NAME }}' does not match required format 'X.Y'."
            exit 1
          fi

      - name: Install yq (YAML Processor)
        run: |
          sudo wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/local/bin/yq
          sudo chmod +x /usr/local/bin/yq
          echo "yq installed successfully."
          yq --version

      - name: Update targetRevision in ArgoCD Application manifest
        run: |
          APP_MANIFEST="project/deploy/kubernetes/overlays/prod/application.yaml"
          TAG="${{ steps.get_tag.outputs.TAG_NAME }}"
          MAIN_BRANCH="main" # Or 'master', depending on your default branch name

          # Ensure the application manifest file exists
          if [ ! -f "$APP_MANIFEST" ]; then
            echo "::error::ArgoCD Application manifest '$APP_MANIFEST' not found in '$PWD'."
            exit 1
          fi

          # Switch to the main branch before making changes and pushing
          echo "Switching to branch: $MAIN_BRANCH"
          git checkout "$MAIN_BRANCH" || git checkout -b "$MAIN_BRANCH" # Checkout or create if it doesn't exist locally

          # Update the targetRevision field using yq
          echo "Updating '$APP_MANIFEST' targetRevision to '$TAG'"
          yq e ".spec.source.targetRevision = \"$TAG\"" -i "$APP_MANIFEST"

          echo "--- Updated Manifest Content ---"
          cat "$APP_MANIFEST"
          echo "------------------------------"

          # Configure Git for the commit
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"

          # Check if there are changes before committing to avoid empty commits
          if git diff --exit-code --quiet; then
            echo "No changes detected in $APP_MANIFEST. Skipping commit."
          else
            # Add the modified file, commit, and push
            git add "$APP_MANIFEST"
            # Add '[skip ci]' to the commit message to prevent this workflow from triggering itself
            git commit -m "chore(argocd): Update production application to tag $TAG [skip ci]"
            echo "Committed changes. Pushing to $MAIN_BRANCH..."
            git push origin "$MAIN_BRANCH" # Explicitly push to the main branch
            echo "Successfully pushed update to $APP_MANIFEST for tag $TAG."
          fi

      - name: Trigger Argo CD webhook
        # This curl command notifies Argo CD to immediately check for changes.
        run: |
          echo "Triggering Argo CD webhook at http://35.228.167.226/api/webhook"
          curl -X POST http://35.228.167.226/api/webhook
          echo "Argo CD webhook triggered."
